/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _apply_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apply.js */ \"./js/apply.js\");\n/* harmony import */ var _profileForm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./profileForm.js */ \"./js/profileForm.js\");\n/* harmony import */ var _jobMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jobMap.js */ \"./js/jobMap.js\");\n/* harmony import */ var _listFilter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./listFilter.js */ \"./js/listFilter.js\");\n$(document).foundation();\n\n\n\n\n\n\n\n$(document).ready(function() {\n    let japply = new _apply_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](),\n        pform = new _profileForm_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](),\n        lfilter = new _listFilter_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n    japply.init();\n    pform.init();\n    lfilter.init();\n});\n\nfunction initMap() {\n    let jmap = new _jobMap_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    jmap.init();\n\n    window.jobMapHandle = jmap;\n}\n\nfunction updateMapMarker(event, anchor, id, isDisinterested) {\n    event.preventDefault();\n    $.ajax({\n        type: 'GET',\n        url: $(anchor).attr('href')\n    }).done((response) => {\n        window.jobMapHandle.updateExistingJobMarker(id, response, isDisinterested);\n    });\n\n    return false;\n}\n\nfunction closeInfoWindow() {\n    window.jobMapHandle.closeMapInfoWindow();\n}\n\nwindow.initMap = initMap;\nwindow.updateMapMarker = updateMapMarker;\nwindow.closeInfoWindow = closeInfoWindow;\n\n\n//# sourceURL=webpack:///./js/app.js?");

/***/ }),

/***/ "./js/apply.js":
/*!*********************!*\
  !*** ./js/apply.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Job Application Form\n */\nclass JobApplication {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.useExistingResume = $('#id_use_existing_resume');\n        this.resumeFileUploadField = $('#resumeFileUploadField');\n    }\n\n    /**\n     * Determine if we are on the right page.\n     *\n     * @returns {boolean}\n     */\n    isValid() {\n        return this.useExistingResume.length > 0;\n    }\n\n    /**\n     * Initialize\n     */\n    init() {\n        if (this.isValid()) {\n            this.useExistingResume.change(e => {\n                this.resumeFileUploadField.toggleClass('invisible');\n            });\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (JobApplication);\n\n\n//# sourceURL=webpack:///./js/apply.js?");

/***/ }),

/***/ "./js/jobMap.js":
/*!**********************!*\
  !*** ./js/jobMap.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Google Maps API wrapper class.\n *\n * Relevant documentation\n * @link https://developers.google.com/maps/documentation/javascript/events\n * @link https://developers.google.com/maps/documentation/javascript/markers\n * @link https://developers.google.com/maps/documentation/javascript/infowindows\n * @link https://developers.google.com/maps/documentation/javascript/geocoding#ReverseGeocoding\n */\nclass JobMapSetup {\n\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.map = null;\n        this.currentMarker = null;\n        this.highlightedMarker = null;\n        this.highlightedMarkerOriginalIcon = null;\n        this.infoWindow = null;\n        this.geocoder = null;\n        this.latitude = 0;\n        this.longitude = 0;\n        this.address = '';\n        this.$form = null;\n        this.$addressForm = null;\n        this.$addressInput = null;\n        this.$addressError = null;\n        this.$locationError = null;\n        this.$generalJobFields = null;\n        this.googleMarkerMap = {};\n        this.googleMarkerMapListeners = {};\n        this.disinterestedIconImage = this.cdnImg('koco-man/koco-grey-40x40.png');\n        this.appliedIconImage = this.cdnImg('koco-man/koco-black-40x40.png');\n        this.activeIconImage = this.cdnImg('koco-man/koco-red-40x40.png');\n    }\n\n    /**\n     * Initialize API\n     */\n    init() {\n        let mapContainer = document.getElementById('map');\n        if (mapContainer !== null) {\n            this.map = new google.maps.Map(mapContainer, {\n                zoom: window.jobMap.zoom,\n                center: {lat: window.jobMap.lat, lng: window.jobMap.lng},\n                mapTypeControlOptions: {\n                    mapTypeIds: ['roadmap'],\n                },\n                mapTypeControl: false,\n                streetViewControl: false\n            });\n            this.addExistingJobMarkers();\n            this.infoWindow = new google.maps.InfoWindow;\n            this.geocoder = new google.maps.Geocoder;\n            this.$addressError = $('#addressSearchError');\n            this.$locationError = $('#postJobLocationError');\n            this.$addressInput = $('#mapAddressInput');\n\n            // Add click listener to the map if a recruiter.\n            if (window.jobMap.isRecruiter) {\n                this.map.addListener('click', (e) => {\n                    this.placeMarkerAndPanTo(e.latLng);\n                });\n            }\n\n            // Bind ajax form listener.\n            this.$form = $('#jobPostForm');\n            this.$form.submit((e) => {\n                this.$locationError.addClass('no-show');\n                if (this.latitude > 0 && this.longitude > 0) {\n                    this.submitMapData(this.$form.attr('action'));\n                } else {\n                    this.$locationError.removeClass('no-show');\n                }\n                e.preventDefault();\n                return false;\n            });\n\n            // Bind address lookup form.\n            this.$addressForm = $('#addressSearchForm');\n            this.$addressForm.submit((e) => {\n                this.$addressError.addClass('no-show');\n                e.preventDefault();\n                this.geocodeAddressAndPlaceMarker($('#mapAddressInput').val());\n                return false;\n            });\n\n            // Bind job field sets.\n            this.$generalJobFields = $('#generalJobFields');\n        }\n    }\n\n    /**\n     * Create the CDN url for the supplied file path.\n     *\n     * @param path\n     * @returns {string}\n     */\n    cdnImg(path)\n    {\n        return '/static/images/' + path\n    }\n\n    /**\n     * Load all uploaded job posts into the map.\n     */\n    addExistingJobMarkers() {\n        for (let i = 0; i < window.jobMap.markers.length; i++) {\n            let markerData = window.jobMap.markers[i],\n                latlng = new google.maps.LatLng(markerData.lat, markerData.lng),\n                iconImageUrl = this.resolveIconImage(markerData);\n\n            let marker = new google.maps.Marker({\n                position: latlng,\n                optimized: false,\n                icon: this.makeComplexIcon(iconImageUrl)\n            });\n\n            marker.setMap(this.map);\n            let listener = marker.addListener('mouseover', () => {\n                // Open up the window and display the job info.\n                this.infoWindow.setContent(markerData.content);\n                this.infoWindow.open(this.map, marker);\n\n                // Update the icon of the marker.\n                marker.setIcon(this.makeComplexIcon(this.activeIconImage));\n                this.highlightedMarker = marker;\n                this.highlightedMarkerOriginalIcon = iconImageUrl;\n            });\n\n            this.googleMarkerMap[markerData.id] = marker;\n            this.googleMarkerMapListeners[markerData.id] = listener;\n        }\n    }\n\n    /**\n     * Determine which image to use for the marker icon.\n     *\n     * @param markerData\n     * @returns {string}\n     */\n    resolveIconImage(markerData) {\n        let iconImageUrl = window.jobMap.iconImage;\n\n        if (window.jobMap.isRecruiter) {\n            // When the job post does not belong to the recruiter, gray it out.\n            if (markerData.isJobPoster === 0) {\n                iconImageUrl = this.disinterestedIconImage;\n            }\n        } else {\n            if (markerData.hasApplied === 1) {\n                iconImageUrl = this.appliedIconImage;\n            } else if (markerData.isDisinterested === 1) {\n                iconImageUrl = this.disinterestedIconImage;\n            }\n        }\n\n        return iconImageUrl;\n    }\n\n    /**\n     * Go through the markers and update the one that matches the supplied id.\n     *\n     * @param id\n     * @param content\n     * @param isDisinterested\n     */\n    updateExistingJobMarker(id, content, isDisinterested) {\n        let marker = this.googleMarkerMap[id],\n            iconImage = isDisinterested === 1 ? this.disinterestedIconImage : window.jobMap.iconImage;\n\n        marker.setIcon(this.makeComplexIcon(iconImage));\n\n        // Remove the old listener.\n        let listener = this.googleMarkerMapListeners[id];\n        google.maps.event.removeListener(listener);\n        delete this.googleMarkerMapListeners[id];\n\n        // Add a new listener with the updated data.\n        marker.addListener('mouseover', () => {\n            // Open up the window and display the job info.\n            this.infoWindow.setContent(content);\n            this.infoWindow.open(this.map, marker);\n        });\n\n        this.infoWindow.close();\n    }\n\n    /**\n     * Callback: Places marker on the map when a user clicks on it.\n     *\n     * @param latLng\n     */\n    placeMarkerAndPanTo(latLng) {\n        // Delete any old marker they selected.\n        if (this.currentMarker !== null) {\n            this.currentMarker.setMap(null);\n        }\n\n        // Place the marker.\n        this.currentMarker = new google.maps.Marker({\n            position: latLng,\n            map: this.map,\n            icon: this.makeComplexIcon(this.activeIconImage),\n            animation: google.maps.Animation.DROP,\n            draggable: true\n        });\n        this.map.panTo(latLng);\n\n        // Add drag listener.\n        google.maps.event.addListener(this.currentMarker, 'dragend', (e) => {\n            this.retrackCurrentLocation(e.latLng)\n        });\n\n        // Track new location.\n        this.retrackCurrentLocation(latLng);\n    }\n\n    /**\n     * When the marker is placed or moved, we need to track the new value and inform the user.\n     *\n     * @param latLng\n     */\n    retrackCurrentLocation(latLng) {\n        // Track the location.\n        this.latitude = latLng.lat();\n        this.longitude = latLng.lng();\n\n        // Show the user the current address.\n        this.geocodeLatLng(this.latitude, this.longitude, this.currentMarker);\n    }\n\n    /**\n     * Make a complex google maps icon from an image URL.\n     *\n     * @param imageUrl\n     * @returns {{url: *, size: google.maps.Size, scaledSize: google.maps.Size}}\n     */\n    makeComplexIcon(imageUrl) {\n        return {\n            url: imageUrl,\n            size: new google.maps.Size(30, 30),\n            scaledSize: new google.maps.Size(30, 30)\n        };\n    }\n\n    /**\n     * Lookup the real address, get the latitude and longitude values, and place a marker.\n     *\n     * @param address\n     */\n    geocodeAddressAndPlaceMarker(address) {\n        this.geocoder.geocode({'address': address}, (results, status) => {\n            if (status === 'OK') {\n                let loc = results[0].geometry.location,\n                    formatted_address = results[0].formatted_address;\n\n                this.map.setCenter(loc);\n                // Clear old marker location.\n                if (this.currentMarker !== null) {\n                    this.currentMarker.setMap(null);\n                }\n\n                // Add new marker.\n                this.currentMarker = new google.maps.Marker({\n                    map: this.map,\n                    position: loc,\n                    icon: window.jobMap.iconImage,\n                    animation: google.maps.Animation.DROP\n                });\n\n                // Track the location.\n                this.latitude = loc.lat();\n                this.longitude = loc.lng();\n\n                // Track the human readable address.\n                this.address = formatted_address;\n\n                // Show in the info window.\n                this.infoWindow.setContent(formatted_address);\n\n                // Open up the window and display the address.\n                this.infoWindow.open(this.map, this.currentMarker);\n            } else {\n                this.$addressError.removeClass('no-show');\n            }\n        });\n    }\n\n    /**\n     * Callback: Looks up the user-friendly address and displays it in the marker.\n     *\n     * @param lat\n     * @param lng\n     * @param marker\n     */\n    geocodeLatLng(lat, lng, marker) {\n        let latlng = {lat: lat, lng: lng};\n        this.geocoder.geocode({'location': latlng}, (results, status) => {\n            if (status === 'OK') {\n              if (results[0]) {\n                  // Track the human readable address.\n                  this.address = results[0].formatted_address;\n\n                  // Update the address in the input field.\n                  this.$addressInput.val(results[0].formatted_address);\n\n                  // Show in the info window.\n                  this.infoWindow.setContent(this.address);\n\n                  // Open up the window and display the address.\n                  this.infoWindow.open(this.map, marker);\n              } else {\n                console.log('No results found');\n              }\n            } else {\n              console.log('Geocoder failed due to: ' + status);\n            }\n          });\n    }\n\n    /**\n     * Appends the map data to the form before submitting it.\n     *\n     * @param action\n     */\n    submitMapData(action) {\n        let formData = {\n            'csrfmiddlewaretoken': $('input[name=\"csrfmiddlewaretoken\"]').val(),\n            'title': $('#id_title').val(),\n            'class_type': $('#id_class_type').val(),\n            'contact_name': $('#id_contact_name').val(),\n            'contact_email': $('#id_contact_email').val(),\n            'contact_number': $('#id_contact_number').val(),\n            'schedule': $('#id_schedule').val(),\n            'other_requirements': $('#id_other_requirements').val(),\n            'is_full_time': $('input[name=\"is_full_time\"]:checked').val(),\n            'salary': $('#id_salary').val(),\n            'benefits': $('#id_benefits').val(),\n            'pay_rate': $('#id_pay_rate').val(),\n            'latitude': this.latitude,\n            'longitude': this.longitude,\n            'address': this.address\n        };\n\n        $.ajax({\n            type: 'POST',\n            url: action,\n            data: formData\n        }).done((response) => {\n            let responseHtml = $.parseHTML(response);\n            let extGeneralJobFields = $(responseHtml).find('#generalJobFields');\n\n            if (response.includes('jobPostListConfirm')) {\n                window.location = '/employment/recruiter/job/my-jobs';\n            } else {\n                this.$generalJobFields.html(extGeneralJobFields.html());\n            }\n        });\n    }\n\n    /**\n     * Wrapper function to close the window from an external invoker.\n     */\n    closeMapInfoWindow() {\n        // Clsoe the InfoWindow.\n        this.infoWindow.close();\n        this.highlightedMarker.setIcon(this.makeComplexIcon(this.highlightedMarkerOriginalIcon));\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (JobMapSetup);\n\n\n//# sourceURL=webpack:///./js/jobMap.js?");

/***/ }),

/***/ "./js/listFilter.js":
/*!**************************!*\
  !*** ./js/listFilter.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Flow Card Wrapper.\n */\nclass FlowCard {\n\n    /**\n     * Constructor.\n     *\n     * @param tags\n     * @param dom\n     * @param parent\n     */\n    constructor(tags, dom, parent) {\n        this.tagList = tags.split(',');\n        this.$dom = $(dom);\n        this.$parent = parent;\n        this.isDetached = false;\n        this.detachedCase = null;\n        this.bindRepostHoverEvent();\n    }\n\n    /**\n     * Determine if we have a specific tag.\n     *\n     * @param tag\n     * @returns {boolean}\n     */\n    hasTag(tag) {\n        for (let i = 0; i < this.tagList.length; i++) {\n            if (this.tagList[i].trim() === tag.trim()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determine if the current card possesses a tag that is active.\n     *\n     * @param tagList\n     * @returns {boolean}\n     */\n    hasAnActiveTag(tagList) {\n        for (let tag in tagList) {\n            if (tagList.hasOwnProperty(tag)) {\n                // Check the active tags only.\n                if (tagList[tag]) {\n                    if (this.hasTag(tag)) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Hide the underlying DOM.\n     */\n    detach() {\n        this.detachedCase = this.$dom.parent().detach();\n        this.isDetached = true;\n    }\n\n    /**\n     * Show the underlying DOM.\n     */\n    attach() {\n        this.$parent.append(this.detachedCase);\n        this.isDetached = false;\n    }\n\n    bindRepostHoverEvent() {\n        let takenDown = this.$dom.find('.taken-down');\n        if (takenDown.length > 0) {\n            takenDown.on('mouseover', () => {\n                takenDown.html('Repost');\n            })\n            takenDown.on('mouseleave', () => {\n                takenDown.html('Taken down');\n            })\n        }\n    }\n}\n\n/**\n * Dynamic filterer for job posts and applications.\n */\nclass ListFiler {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.$searchFilters = $('#searchFilters');\n        this.$secondarySearchFilters = $('#secondarySearchFilters');\n        this.$resetFiltersButton = $('#resetFiltersButton');\n        this.$cards = $('.flow-card');\n        this.$filterCardsParent = $('#filterCardsParent');\n        this.flowCardList = [];\n        this.listFilterResults = null;\n        this.buttonList = [];\n        this.secondaryButtonList = [];\n        this.buttonStateMap = {};\n        this.secondaryButtonStateMap = {};\n    }\n\n    /**\n     * Determine if it's neceassry to manipulate any data.\n     *\n     * @returns {boolean}\n     */\n    isValid() {\n        return this.$searchFilters.length > 0;\n    }\n\n    /**\n     * Fire up.\n     */\n    init() {\n        if (this.isValid()) {\n            // Update results tracker.\n            this.listFilterResults = $('#listFilterResults');\n\n            // Track filter buttons.\n            this.buttonList = this.$searchFilters.find('button');\n\n            // Track secondary filter options if they exist.\n            if (this.$secondarySearchFilters.length > 0) {\n                this.secondaryButtonList = this.$secondarySearchFilters.find('button');\n            }\n\n            // Attach listeners to filter buttons.\n            this.attachPrimaryFilterListeners();\n            this.attachSecondaryFilterListeners();\n\n            // Organize to be filtered items.\n            this.prepareFlowCards();\n\n            // Reset all filters button.\n            this.$resetFiltersButton.on('click', () => {\n                this.resetAllFilters();\n            });\n        }\n    }\n\n    /**\n     * Go through the primary filters and attach their action callbacks.\n     */\n    attachPrimaryFilterListeners() {\n        this.attachFilterListeners(this.buttonList, this.buttonStateMap);\n    }\n\n    /**\n     * Go through the secondary filters and attach their action callbacks.\n     */\n    attachSecondaryFilterListeners() {\n        if (this.secondaryButtonList.length > 0) {\n            this.attachFilterListeners(this.secondaryButtonList, this.secondaryButtonStateMap);\n        }\n    }\n\n    /**\n     * Attach button listeners to apply filters.\n     *\n     * @param filterButtonList\n     * @param filterStateMap\n     */\n    attachFilterListeners(filterButtonList, filterStateMap) {\n        for (let i = 0; i < filterButtonList.length; i++) {\n            let $button = $(filterButtonList[i]),\n                tag = $button.data('filtertag');\n\n            // Track states and set default values.\n            filterStateMap[tag] = true;\n\n            // Attach listener\n            $button.on('click', () => {\n                let ctag = $button.data('filtertag');\n\n                // Update active state and button styling.\n                if (filterStateMap[ctag]) {\n                    $button.attr('class', 'disabled-button');\n                    filterStateMap[ctag] = false;\n                    this.removeFilter(ctag, filterStateMap);\n                } else {\n                    $button.attr('class', 'secondary-selected-button-1');\n                    filterStateMap[ctag] = true;\n                    this.applyFilter(ctag, filterStateMap);\n                }\n            });\n        }\n    }\n\n    /**\n     * Applies the filter and shows the relevant items.\n     *\n     * @param tag\n     * @param filterStateMap\n     */\n    applyFilter(tag, filterStateMap) {\n        // Go through each flow card and check the filter.\n        for (let k = 0; k < this.flowCardList.length; k++) {\n            let fc = this.flowCardList[k];\n\n            // Attach if we have the tag, is currently hidden, and is not being filtered across all filter sets.\n            if (fc.hasTag(tag) && !this.isCardFilteredOut(fc)) {\n                if (fc.isDetached) {\n                    fc.attach();\n                }\n            } else if (!fc.hasTag(tag) && !fc.hasAnActiveTag(filterStateMap)) {\n                // Detach if we dont have the tag, is currently showing, and the card has no active filter.\n                if (!fc.isDetached) {\n                    fc.detach();\n                }\n            }\n        }\n\n        // Inform the user how many items are showing.\n        this.updateDisplayCount();\n    }\n\n    /**\n     * Removes the filter and hides the relevant items.\n     *\n     * @param tag\n     * @param filterStateMap\n     */\n    removeFilter(tag, filterStateMap) {\n        // Go through each flow card and check the filter.\n        for (let k = 0; k < this.flowCardList.length; k++) {\n            let fc = this.flowCardList[k];\n\n            // Attach if we have the tag, is currently hidden, and has an active filter.\n            if (!fc.hasTag(tag) && fc.isDetached && fc.hasAnActiveTag(filterStateMap)) {\n                fc.attach();\n            } else if (fc.hasTag(tag)) {\n                if (!fc.isDetached && !fc.hasAnActiveTag(filterStateMap)) {\n                    fc.detach();\n                }\n            }\n        }\n\n        // Inform the user how many items are showing.\n        this.updateDisplayCount();\n    }\n\n    /**\n     * Check all the filter maps to see if the supplied flow card is being filtered out.\n     *\n     * @param flowCard\n     * @returns {boolean}\n     */\n    isCardFilteredOut(flowCard) {\n        if (this.secondaryButtonStateMap.length > 0) {\n            return !flowCard.hasAnActiveTag(this.buttonStateMap) &&\n                !flowCard.hasAnActiveTag(this.secondaryButtonStateMap);\n        }\n\n        return !flowCard.hasAnActiveTag(this.buttonStateMap);\n    }\n\n    /**\n     * Adjust all buttons and cards to default values.\n     */\n    resetAllFilters() {\n        // Reset primary filters.\n        this.resetFilters(this.buttonList, this.buttonStateMap);\n\n        // Reset secondary filters if need be.\n        this.resetFilters(this.secondaryButtonList, this.secondaryButtonStateMap);\n\n        // Reset cards.\n        for (let k = 0; k < this.flowCardList.length; k++) {\n            let fc = this.flowCardList[k];\n            if (fc.isDetached) {\n                fc.attach();\n            }\n        }\n\n        this.updateDisplayCount();\n    }\n\n    /**\n     * Reset filters from the supplied list of buttons.\n     *\n     * @param filterButtonList\n     * @param filterStateMap\n     */\n    resetFilters(filterButtonList, filterStateMap) {\n        if (filterButtonList.length > 0) {\n            for (let i = 0; i < filterButtonList.length; i++) {\n                let $button = $(filterButtonList[i]),\n                    tag = $button.data('filtertag');\n\n                filterStateMap[tag] = true;\n                $button.attr('class', 'secondary-selected-button-1');\n            }\n        }\n    }\n\n    /**\n     * Prepare flow card items to make filtering easier.\n     */\n    prepareFlowCards() {\n        for (let j = 0; j < this.$cards.length; j++) {\n            let d = this.$cards[j];\n            this.flowCardList.push(new FlowCard($(d).data('filtertaglist'), d, this.$filterCardsParent));\n        }\n    }\n\n    /**\n     * Each time a filter is added a removed we need to show the new shown amount.\n     */\n    updateDisplayCount() {\n        let totalCount = this.flowCardList.length;\n\n        if (this.$filterCardsParent.children().length === this.flowCardList.length) {\n            this.listFilterResults.html(`Currently displaying ${totalCount}/${totalCount}`);\n        } else {\n            let filterCount = this.$filterCardsParent.children().length;\n\n            this.listFilterResults.html(`Currently displaying ${filterCount}/${totalCount}`);\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ListFiler);\n\n\n//# sourceURL=webpack:///./js/listFilter.js?");

/***/ }),

/***/ "./js/profileForm.js":
/*!***************************!*\
  !*** ./js/profileForm.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Profile Form\n */\nclass ProfileForm {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.visaType = $('#id_visa_type');\n        this.visaConditions = $('#visaConditions');\n    }\n\n    /**\n     * Determine if we are on the right page.\n     *\n     * @returns {boolean}\n     */\n    isValid() {\n        return this.visaType.length > 0;\n    }\n\n    /**\n     * Initialize\n     */\n    init() {\n        if (this.isValid()) {\n            this.visaType.change(e => {\n                if (this.visaType.val() === 2 || this.visaType.val() === '2') {\n                    this.visaConditions.removeClass('invisible');\n                } else {\n                    this.visaConditions.addClass('invisible');\n                }\n            });\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProfileForm);\n\n\n//# sourceURL=webpack:///./js/profileForm.js?");

/***/ })

/******/ });